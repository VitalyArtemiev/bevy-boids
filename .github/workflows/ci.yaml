name: CI

on:
  pull_request:
  push:

env:
  CARGO_TERM_COLOR: always
  # If nightly is breaking CI, modify this variable to target a specific nightly version.
  NIGHTLY_TOOLCHAIN: nightly

concurrency:
  group: ${{github.workflow}}-${{github.ref}}
  cancel-in-progress: ${{github.event_name == 'pull_request'}}

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-build-stable-${{ hashFiles('**/Cargo.toml') }}
      - uses: dtolnay/rust-toolchain@stable
      - name: Install Linux dependencies
        uses: ./.github/actions/install-linux-deps
      - name: Build & run tests
        # See tools/ci/src/main.rs for the commands this runs
        run: cargo run -p ci -- test
        env:
          CARGO_INCREMENTAL: 0
          RUSTFLAGS: "-C debuginfo=0 -D warnings"

  ci:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-ci-${{ hashFiles('**/Cargo.toml') }}
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - name: Install Linux dependencies
        uses: ./.github/actions/install-linux-deps
        with:
          wayland: true
          xkb: true
      - name: CI job
        # See tools/ci/src/main.rs for the commands this runs
        run: cargo run -p ci -- lints

  miri:
    # Explicity use macOS 14 to take advantage of M1 chip.
    runs-on: macos-14
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-miri-${{ hashFiles('**/Cargo.toml') }}
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.NIGHTLY_TOOLCHAIN }}
          components: miri
      - name: CI job
        # To run the tests one item at a time for troubleshooting, use
        # cargo --quiet test --lib -- --list | sed 's/: test$//' | MIRIFLAGS="-Zmiri-disable-isolation -Zmiri-permissive-provenance -Zmiri-disable-weak-memory-emulation" xargs -n1 cargo miri test -p bevy_ecs --lib -- --exact
        run: cargo miri test -p bevy_ecs
        env:
          # -Zrandomize-layout makes sure we dont rely on the layout of anything that might change
          RUSTFLAGS: -Zrandomize-layout
          # https://github.com/rust-lang/miri#miri--z-flags-and-environment-variables
          # -Zmiri-disable-isolation is needed because our executor uses `fastrand` which accesses system time.
          # -Zmiri-permissive-provenance disables warnings against int2ptr casts (since those are used by once_cell)
          # -Zmiri-ignore-leaks is necessary because a bunch of tests don't join all threads before finishing.
          MIRIFLAGS: -Zmiri-ignore-leaks -Zmiri-disable-isolation -Zmiri-permissive-provenance

  check-compiles:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: ci
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
            crates/bevy_ecs_compile_fail_tests/target/
            crates/bevy_reflect_compile_fail_tests/target/
          key: ${{ runner.os }}-cargo-check-compiles-${{ hashFiles('**/Cargo.toml') }}
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      - name: Install Linux dependencies
        uses: ./.github/actions/install-linux-deps
      - name: Check Compile
        # See tools/ci/src/main.rs for the commands this runs
        run: cargo run -p ci -- compile

  build-wasm:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ubuntu-assets-cargo-build-wasm-stable-${{ hashFiles('**/Cargo.toml') }}
      - uses: dtolnay/rust-toolchain@stable
        with:
          target: wasm32-unknown-unknown
      - name: Check wasm
        run: cargo check --target wasm32-unknown-unknown



